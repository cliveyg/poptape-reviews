name: Build and test
on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
  - cron: '0 10 * * 1' # run "At 10:00 on Monday"

jobs:
  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest
      volumes:
        - ${{ github.workspace }}:/app
    services:
      # label used to access the service container
      postgres:
        # dockerhub image
        image: postgres
        # provide the login and db deets for postgres
        env:
          POSTGRES_DB: testdb
          POSTGRES_PASSWORD: testdb_password
          POSTGRES_USER: testdb_user
        ports:
          # maps tcp port 5432 on service container to the host
          - 5432:5432
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      # add install ca certs step to prevent tls error messages
      # when installing golang deps
      - name: Install ca certs dep
        run: |
          apt-get update && apt-get install --yes --no-install-recommends ca-certificates curl
      
      - name: Check out the repo
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.x'
          
      - name: Install Go dependencies
        run: |
          rm -f go.mod go.sum
          go mod init github.com/cliveyg/poptape-reviews
          go mod tidy
          
      # run go build and output binary to dev null as it's not used for running unit tests
      - name: Run go build
        run: go build -o /dev/null ./...
        
      # have to create an .env file to be able to run unit tests 
      - name: Create .env file for unit testing
        run: |
          touch .env
          echo TESTDB_HOST=postgres >> .env
          echo TESTDB_USERNAME=testdb_user >> .env
          echo TESTDB_PASSWORD=testdb_password >> .env
          echo TESTDB_NAME=testdb >> .env
          echo ENVIRONMENT=DEV >> .env
          echo AUTHYURL=https://poptape.club/authy/checkaccess/10 >> .env
          echo AUCTIONURL=https://poptape.club/auctionhouse/auction/ >> .env
          echo ITEMURL=https://poptape.club/items/ >> .env
          cat .env
          
      # run unit tests
      - name: Run go test and generate test coverage file
        run: go test -v ./... -coverprofile=./cover.out
        
      # and check test coverage percentage
      - name: Go Coverage Badge  # Pass the `coverage.out` output to this action
        uses: tj-actions/coverage-badge-go@v2
        with:
          filename: cover.out
          
      - name: Verify Changed files
        uses: tj-actions/verify-changed-files@v12
        id: verify-changed-files
        with:
          files: README.md

      - name: Commit changes
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "chore: Updated coverage badge."
