name: Build and test
on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
  - cron: '0 10 * * 1' # run "At 10:00 on Monday"

jobs:
  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest
      volumes:
        - ${{ github.workspace }}:/app
    services:
      # label used to access the service container
      postgres:
        # dockerhub image
        image: postgres
        # provide the login and db deets for postgres
        env:
          POSTGRES_DB: poptape_reviews_test
          POSTGRES_PASSWORD: ${{ secrets.TESTDB_PASSWORD }}
          POSTGRES_USER: poptape_reviews_test
        ports:
          # maps tcp port 5432 on service container to the host
          - 5432:5432
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      # add install ca certs step to prevent tls error messages
      # when installing golang deps
      - name: Install ca certs dependency
        run: |
          apt-get update && apt-get install --yes --no-install-recommends ca-certificates
      
      - name: Check out the repo
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'
      
      - name: Install Go dependencies
        run: |
          rm -f go.mod go.sum
          go mod init github.com/cliveyg/poptape-reviews
          go mod tidy
      
      # run go build and output binary to dev null as it's not used for running unit tests
      - name: Run go build
        run: go build -o /dev/null ./...
      
      # have to create an .env file to be able to run unit tests 
      - name: Create .env file from github secrets
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
      
      # run unit tests
      - name: Run go test and generate test coverage file
        run: go test -v ./... -coverprofile=./cover.out
      
      # and check test coverage percentage
      - name: Check test coverage is above threshold
        env:
          TESTCOVERAGE_THRESHOLD: 70
        run: |
            echo "Checking test coverage is above threshold..."
            echo "Threshold             : $TESTCOVERAGE_THRESHOLD %"
            totalCoverage=`go tool cover -func=cover.out | grep total | grep -Eo '[0-9]+\.[0-9]+'`
            echo "Current test coverage : $totalCoverage %"
            echo "-----------------------------------------------------------"
            if [ $(echo "$totalCoverage $TESTCOVERAGE_THRESHOLD" | awk '{print ($1 > $2)}') ]
            then
                echo "OK"
            else
                echo "Current test coverage is below threshold. Please add more unit tests or adjust threshold to a lower value."
                echo "Failed"
                exit 1
            fi
